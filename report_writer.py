# report_writer.py
# Generates strategic intelligence report from Telegram data

import pandas as pd
import os
from datetime import datetime
from collections import Counter
from bertopic import BERTopic


def summarize_narratives(df, top_n=5):
    model = BERTopic(embedding_model="paraphrase-MiniLM-L6-v2")
    topics, _ = model.fit_transform(df['text'].astype(str))
    top_topics = model.get_topic_info().head(top_n + 1).iloc[1:]  # skip -1 outliers
    summary = "\n".join([f"- **{row['Name']}** ({row['Count']} messages)" for _, row in top_topics.iterrows()])
    return summary, model


def detect_propaganda_patterns(df):
    cues = ["nato", "ukraine", "threat", "biolabs", "provocation", "nazis", "satanism"]
    propaganda_hits = df['text'].str.lower().apply(lambda t: any(cue in t for cue in cues))
    count = propaganda_hits.sum()
    examples = df[propaganda_hits].sample(min(3, count))['text'].tolist() if count > 0 else []
    return count, examples


def summarize_actors(df):
    actors = ["–ø—É—Ç–∏–Ω", "–ª—É–∫–∞—à–µ–Ω–∫–æ", "–Ω–∞—Ç–æ", "–∑–µ–ª–µ–Ω—Å–∫–∏–π", "–µ–≤—Ä–æ–ø–∞", "–ø–æ–ª—å—à–∞", "—Å—à–∞", "—ç—Å—Ç–æ–Ω–∏—è"]
    mentions = Counter()
    for actor in actors:
        mentions[actor] = df['text'].str.lower().str.count(actor).sum()
    top_mentions = sorted(mentions.items(), key=lambda x: x[1], reverse=True)
    return top_mentions


def write_markdown_report(df, topic_model, out_path="analytics/output/summary.md"):
    date_str = datetime.now().strftime("%Y-%m-%d")
    os.makedirs(os.path.dirname(out_path), exist_ok=True)

    narrative_summary, _ = summarize_narratives(df)
    propaganda_count, propaganda_examples = detect_propaganda_patterns(df)
    actor_summary = summarize_actors(df)

    with open(out_path, "w", encoding="utf-8") as f:
        f.write(f"# Strategic Telegram Analysis Report ‚Äî {date_str}\n\n")

        f.write("## Narrative and Messaging Themes\n")
        f.write(narrative_summary + "\n\n")

        f.write("## Information Warfare and Propaganda Indicators\n")
        f.write(f"Detected {propaganda_count} potential propaganda-aligned messages.\n\n")
        for ex in propaganda_examples:
            f.write(f"> {ex[:300]}...\n\n")

        f.write("## Actor Analysis\n")
        for name, count in actor_summary:
            f.write(f"- **{name}** mentioned {int(count)} times\n")
        f.write("\n")

        f.write("## Strategic Takeaways\n")
        f.write("- Monitor coordinated narratives tying NATO to aggressive actions.\n")
        f.write("- Continued rhetorical use of dehumanizing or WWII-era language (e.g. 'Nazis').\n")
        # f.write("- Belarusian figures (esp. –õ—É–∫–∞—à–µ–Ω–∫–æ) increasingly co-equal in narrative.\n")

        f.write("\n---\n")
        f.write("_Generated by automated pipeline_\n")

    print(f"üìù Markdown report saved to: {out_path}")
